@page "/productDetails/{idProduct:int}"
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<h3>Detalle</h3>

@if (product == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>

    @if (@Message != null)
    {
        <div class="alert alert-danger" role="alert">
            @Message
        </div>
    }

}
else
{
    <div class="jumbotron">
        <h1 class="display-4">@product.ProductName</h1>
        <img src=@product.ImageUrl class="img-fluid" alt="Responsive image">
        <p class="lead">@product.Description</p>
        <hr class="my-4">
        <p><strong>Categoria: </strong>@product.CategoryName</p>
        <p><strong>Precio: </strong>@product.Price</p>
        <p><strong>Descuento: </strong>@product.Discount</p>
        <p><strong>Fecha de Creacion: </strong>@product.CreationDate</p>
        <p><strong>Fecha de Actualizacion: </strong>@product.UpdateDate</p>
        <button class="btn btn-danger" @onclick="@Delete">Eliminar</button>
    </div>
}


@code {
    [Parameter]
    public int idProduct { get; set; }

    private Product product = new Product();
    public string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            product = await ProductService.GetProductDetails(idProduct);
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }

    }

    protected async Task Delete()
    {
        HttpResponseMessage result;
        result = await ProductService.DeleteProduct(idProduct);

        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/products", forceLoad: true);
        }
        else
        {
            Message = "Error eliminando el registro" + result.StatusCode.ToString();
        }

    }
}
