@page "/productsCatalog"
@inject IShoppingCartService ShoppingCartService
@inject ICategoryService CategoryService
@using GamesStoreWebApp.Components

<link href="~/css/album.css" rel="stylesheet" />


@if (ProductCatalogList == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    @if (@Message != null)
    {
        <div class="alert alert-danger" role="alert">
            @Message
        </div>
    }
    else
    {
        <h3>Productos</h3>
        <br />
        <form>
            <div class="form-group">
                <div class="col-md-5">
                    <Search OnSearchChanged="SearchChanged" />
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-5">
                    <label>Filtrar por categoria:</label>
                    <Filter OnFilterChanged="FilterChanged" />
                </div>
            </div>
        </form>

        <br>
        <div class="album py-5 bg-light" style="width:100%">
            <div class="container">

                <div class="row">
                    @foreach (var product in ProductCatalogList)
                    {
                        <div class="col-md-4">
                            <div class="card mb-4 shadow-sm">
                                <img src=@product.ImageUrl alt="..." class="bd-placeholder-img card-img-top">
                                <div class="card-body">
                                    <h5 class="card-title">@product.ProductName</h5>
                                    <h6 class="card-subtitle mb-2 text-muted">@product.CategoryName</h6>
                                    <p class="card-text">@product.Description</p>
                                    <p class="card-text">$@product.Price</p>
                                    <p class="card-text">Descuento: @product.Discount %</p>
                                    @if (product.Discount > 0)
                                    {
                                        <p class="card-text">Precio Final: @Math.Round((product.Price - (product.Price * product.Discount / 100)), 2, MidpointRounding.ToEven)</p>
                                    }
                                    else
                                    {
                                        <p class="card-text">Precio Final: @product.Price</p>
                                    }
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="btn-group">
                                            @*<button type="button" class="btn btn-sm btn-outline-secondary">View</button>*@
                                            <a class="btn btn-sm btn-outline-secondary" href="productCatalogDetails/@product.IdProduct" role="button">Detalle</a>
                                            @*<button type="button" class="btn btn-sm btn-outline-secondary">Edit</button>*@
                                        </div>
                                        <small class="text-muted">@product.CreationDate</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col">
                <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
            </div>
        </div>
    }
}



@code {
    public string Message { get; set; }

    public List<ShoppingCart> ProductCatalogList { get; set; } = new List<ShoppingCart>();
    public Entities.MetaData MetaData { get; set; } = new Entities.MetaData();
    private ProductParameters _productParameters = new ProductParameters();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //var authState = await authenticationStateTask;
            //var user = authState.User;

            //if (user.Identity.IsAuthenticated)
            //{

            //}
            await GetProducts();
        }
        catch (Exception ex)
        {

            Message = ex.Message;
        }
    }

    private async Task SelectedPage(int page)
    {
        _productParameters.PageNumber = page;
        await GetProducts();
    }

    private async Task GetProducts()
    {
        //var pagingResponse = await ShoppingCartService.GetProductsCatalog(_productParameters);
        //ProductCatalogList = pagingResponse.Items;
        //MetaData = pagingResponse.MetaData;

        var pagingResponse = await ShoppingCartService.GetProductsCatalog(_productParameters);
        if (pagingResponse != null)
        {
            ProductCatalogList = pagingResponse.Items;
            MetaData = pagingResponse.MetaData;
        }
        else
        {
            Message = "No tienes acceso a este contenido";
        }
    }

    private async Task SearchChanged(string searchTerm)
    {
        Console.WriteLine(searchTerm);
        _productParameters.PageNumber = 1;
        _productParameters.SearchTerm = searchTerm;
        await GetProducts();
    }

    private async Task FilterChanged(ChangeEventArgs e)
    {
        Console.WriteLine(Convert.ToInt32(e.Value));
        _productParameters.PageNumber = 1;
        _productParameters.FilterTerm = Convert.ToInt32(e.Value);
        await GetProducts();
    }

}
